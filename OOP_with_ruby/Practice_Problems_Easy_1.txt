1. Which of the following are objects in Ruby? If they are objects, how can you find out what class they belong to?

true
"hello"
[1, 2, 3, "happy days"]
142

A: They are all objects. You can find out the class using the class method.

true.class => TrueClass
"hello".class => String
[1, 2, 3, "happy days"].class => Array
142.class => Integer

2. If we have a Car class and a Truck class and we want to be able to go_fast, how can we add the ability for them to go_fast using the module Speed? How can you check if your Car or Truck can now go fast?

module Speed
  def go_fast
    puts "I am a #{self.class} and going super fast!"
  end
end

class Car
  def go_slow
    puts "I am safe and driving slow."
  end
end

class Truck
  def go_very_slow
    puts "I am a heavy truck and like going very slow."
  end
end

A: Put `include Speed` in Car and Truck class definitions.

```
car = Car.new
car.respond_to?(:go_fast) # => true
car.go_fast # => "I am a Car and going super fast!"
truck = Truck.new
truck.respond_to?(:go_fast) # => true
truck.go_fast # => "I am a Truck and going super fast!"

```

3.When we called the go_fast method from an instance of the Car class (as shown below) you might have noticed that the string printed when we go fast includes the name of the type of vehicle we are using. How is this done?

A: Even though the method is defined in a module, it is called as an instance method from within the Car class. Therefore, `self` will refer to the calling object. The `class` method returns a `Class` object. When a `Class` object appears in `#{}` inside double quotes, it gets interpolated as a string value, which means it will call its `to_s` method. This will return the name of the class, and that will become part of the resulting string.

4. If we have a class AngryCat how do we create a new instance of this class?

The AngryCat class might look something like this:

class AngryCat
  def hiss
    puts "Hisssss!!!"
  end
end

A.
```
angry_cat = AngryCat.new
```

5. Which of these two classes has an instance variable and how do you know?

class Fruit
  def initialize(name)
    name = name
  end
end

class Pizza
  def initialize(name)
    @name = name
  end
end

A: `Pizza` has an instance variable, because `@name` starts with the '@' character. If it didn't start with that character, then `name` would have been initialized as a variable local to `Pizza`'s `initialize` method.

6. What could we add to the class below to access the instance variable @volume?

class Cube
  def initialize(volume)
    @volume = volume
  end
end

A. `attr_reader :volume` if we only want read access. `attr_writer :volume` if we only want write access. `attr_accessor` if we want both read and write access. We could also return the variable or change it with custom defined instance methods:
```
def volume
@volume
end

def volume=(volume)
@volume = volume
end
```
Although it's not a good way to do it, we could also use the `instance_variable_get` method on an instance of the class, like:
```
cube = Cube.new
cube.instance_variable_get(:@volume
```

7. What is the default return value of to_s when invoked on an object? Where could you go to find out if you want to be sure?

A: The default return value of `to_s` when invoked on an object is a string representing the object's class and an encoding of the object id. If you wanted to find out for sure, you could go to the documentation and see if the `to_s` method had been overridden in the class definition.

8: If we have a class such as the one below:
```
class Cat
  attr_accessor :type, :age

  def initialize(type)
    @type = type
    @age  = 0
  end

  def make_one_year_older
    self.age += 1
  end
end
```
You can see in the make_one_year_older method we have used self. What does self refer to here?

A: `self` refers to the instance of the `Cat` class that calls the `make_one_year_older` method.
```
cat1 = Cat.new("Persian")
cat1.make_one_year_older # `self` refers to `cat1`
```
9. If we have a class such as the one below:

class Cat
  @@cats_count = 0

  def initialize(type)
    @type = type
    @age  = 0
    @@cats_count += 1
  end

  def self.cats_count
    @@cats_count
  end
end
In the name of the cats_count method we have used self. What does self refer to in this context?

A: `self` in this context refers to the `Cat` class. The `cats_count` method would have to be called thusly: `Cat.cats_count`.

10. If we have the class below, what would you need to call to create a new instance of this class?

class Bag
  def initialize(color, material)
    @color = color
    @material = material
  end
end
A: You have to use the `new` method, and since the `initialize` method is expecting two arguments, you have to pass in two arguments when you create a new instance of the object.
```
#Assume `color` and `material` are variables that have been initialized.

Bag.new(color, material)
```
